expertise$Eexp7 <- ifelse(expertise$Eexp7 %in% c('checked'),1,0)
totcomp <- expertise$Eexp1 + expertise$Eexp2 + expertise$Eexp3 + expertise$Eexp4 + expertise$Eexp5 + expertise$Eexp6 + expertise$Eexp7
none <- ifelse(totcomp==0,1,0)
F2 <- 0.8*expertise$Eexp1 + 0.7*expertise$Eexp2 + 0.4*expertise$Eexp5 + 0.4*expertise$Eexp7
F3 <- 1*expertise$Eexp6 - 0.6*none #sorted
#F4 <- 0.6*plain$undefined_Used_SSH + 0.5*plain$undefined_Configured_a_firewall
#total_security <- F1 + F4
total_computer <- F2 + F3
expertise$Etech1 <- ifelse(expertise$Etech1 %in% c('checked'),1,0)
expertise$Etech2 <- ifelse(expertise$Etech2 %in% c('checked'),1,0)
expertise$Etech3 <- ifelse(expertise$Etech3 %in% c('checked'),1,0)
expertise$Etech4 <- ifelse(expertise$Etech4 %in% c('checked'),1,0)
expertise$Etech5 <- ifelse(expertise$Etech5 %in% c('checked'),1,0)
expertise$Etech6 <- ifelse(expertise$Etech6 %in% c('checked'),1,0)
tottech <- expertise$Etech1 + expertise$Etech2 + expertise$Etech3 + expertise$Etech4 + expertise$Etech5 + expertise$Etech6
Etech <- ifelse(tottech>=2,1,0)
expertise <- cbind(expertise, Etech, total_computer)
expertise$Elang <- ifelse(expertise$Elang==15, 2, ifelse(expertise$Elang==510, 3, ifelse(expertise$Elang==10, 4, expertise$Elang)))
expertise$Eyears <-  as.factor(expertise$Eyears)
expertise$Eyears <- ifelse(expertise$Eyears %in% c('None'), 1, ifelse(expertise$Eyears %in% c('A_few_months_less_than_a_year'), 2, ifelse(expertise$Eyears %in% c('15_years'), 3, 4)))
expertise$Etimes <-  as.factor(expertise$Etimes)
expertise$Etimes <- ifelse(expertise$Etimes %in% c('Once_every_year_or_less'), 1, ifelse(expertise$Etimes %in% c('Once_every_month'), 2, ifelse(expertise$Etimes %in% c('Once_every_week'), 3, ifelse(expertise$Etimes %in% c('Once_every_day'), 4, 5))))
expertise <- cbind(expertise, totalknowledge_fa)
copy_expertise <- cbind(expertise, combined$acc)
categoryl <- rep("low",13)
categoryh <- rep("high",13)
category <- c(categoryl, categoryh)
know_mud <- copy_expertise[1:26,]
know_mud <- know_mud[order(know_mud$totalknowledge_fa),]
know_mud <- cbind(know_mud, category)
know_plain <- copy_expertise[27:52,]
know_plain <- know_plain[order(know_plain$totalknowledge_fa),]
know_plain <- cbind(know_plain, category)
comp_mud <- copy_expertise[1:26,]
comp_mud <- comp_mud[order(comp_mud$total_computer),]
comp_mud <- cbind(comp_mud, category)
comp_plain <- copy_expertise[27:52,]
comp_plain <- comp_plain[order(comp_plain$total_computer),]
comp_plain <- cbind(comp_plain, category)
know_mud_lh <- wilcox.test(know_mud$totalknowledge_fa[1:13], know_mud$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
know_plain_lh <- wilcox.test(know_plain$totalknowledge_fa[1:13], know_plain$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_mud_lh <- wilcox.test(comp_mud$total_computer[1:13], comp_mud$total_computer[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_plain_lh <- wilcox.test(comp_plain$total_computer[1:13], comp_plain$total_computer[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge")
ggboxplot(know_plain, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Plain - Knowledge")
ggboxplot(comp_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Comp Exp")
ggboxplot(comp_plain, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Plain - Comp Exp")
#know_plain_acc_lh <- wilcox.test(know_plain$`combined$acc`[1:13], know_plain$`combined$acc`[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#know_mud_acc_lh <- wilcox.test(know_mud$`combined$acc`[1:13], know_mud$`combined$acc`[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#comp_plain_acc_lh <- wilcox.test(comp_plain$`combined$acc`[1:13], comp_plain$`combined$acc`[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#comp_mud_acc_lh <- wilcox.test(comp_mud$`combined$acc`[1:13], comp_mud$`combined$acc`[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#ordinal logistic regression
# [1] "Header"
# [2] "Group_name"
# [3] "User_name"
# [4] "How_many_remote_servers_websites_on_the_Internet_can_the_smart_coffee_maker_communicate_with" (2)
# [5] "undefined_IP4_800_80" (checked)
# [6] "undefined_IPv6_800_80" (checked)
# [7] "undefined_IPv4_777_888" (unchecked)
# [8] "undefined_IPv6_777_888" (unchecked)
# [9] "undefined_IPv4_Any_source_port_Any_destination_port"  (unchecked)
# [10] "undefined_IPv6_Any_source_port_Any_destination_port" (unchecked)
# [11] "Which_local_device_can_the_coffee_maker_communicate_with"  (Motion)
# [12] "When_the_smart_coffee_maker_communicates_with_the_motion_sensor_locally_which_source_port_numbers_should_it_use" (777_123)
# [13] "When_the_smart_coffee_maker_communicates_with_the_motion_sensor_locally_which_destination_port_numbers_should_it_use" (888_225)
# [14] "When_the_motion_sensor_communicates_with_the_coffee_maker_locally_over_UDP_which_internet_layer_protocol_source_port_number_and_destination_port_number_would_it_use" (IPv4_123_50000)
# [15] "Can_the_smart_fridge_communicate_with_any_other_local_devices_beside_itself" (No)
# [16] "How_many_local_devices_and_remote_servers_can_the_Vase_device_communicate_with" (0_local_device__3_remote_servers)
# [17] "undefined_www_vaseupdater_com"    (unchecked)
# [18] "undefined_www_vasefileserver_com" (unchecked)
# [19] "undefined_www_vasedb_com"         (unchecked)
# [20] "undefined_www_vasefirmware_com"  (checked)
# [21] "undefined_www_vaselinks_com"     (checked)
# [22] "undefined_www_vasedatabase_com"  (checked)
# [23] "undefined_TCP_IPv4_Any_Source_Port_443"  (checked)
# [24] "undefined_TCP_IPv6_Any_Source_Port_443"  (checked)
# [25] "undefined_UDP_IPv4_Any_Source_Port_Any_Destination_Port"  (unchecked)
# [26] "undefined_UDP_IPv6_Any_Source_Port_Any_Destination_Port"  (unchecked)
# [27] "ResponseTime"
# [28] "participant"
# [29] "valid_participant"
# [30] "What_is_your_age"
# [31] "Which_gender_do_you_most_identify_with"
# [32] "What_is_the_highest_degree_or_level_of_school_you_have_completed_If_you_are_currently_enrolled_in_school_please_indicate_the_highest_degree_you_have_received_"
# [33] "What_is_your_current_employment_status"
# [34] "What_is_your_annual_income"
# [35] "ResponseTime.1"
# [36] "participant.1"
# [37] "valid_participant.1"
# [38] "undefined_Pretending_to_be_someone_or_a_company_to_steal_users_information"
# [39] "undefined_Making_a_fake_website_that_looks_legitimate_to_steal_user_information"
# [40] "undefined_Sending_spam_emails_Defrauding_someone_online"
# [41] "undefined_Other_methods_for_stealing_information"
# [42] "undefined_Hacking_someones_computer"
# [43] "undefined_Tracking_your_internet_habits_to_send_advertisements_"
# [44] "undefined_I_Do_not_Know"
# [45] "undefined_The_certificate_provides_encryption"
# [46] "undefined_The_certificate_protects_information"
# [47] "undefined_The_certificate_shows_the_website_is_registered_and_valid"
# [48] "undefined_The_certificate_actively_is_secure_and_safe_against_malicious_stuff_including_hackers"
# [49] "undefined_The_website_is_trustworthy_and_has_proper_privacy_protection_and_is_accountable_for_information_use"
# [50] "SQL_injection_is_a_technique_to"
# [51] "The_difference_between_a_passive_and_reactive_Intrusion_Detection_System_is"
# [52] "Without_any_other_changes_in_the_default_settings_of_a_web_server_what_can_be_the_motivation_to_close_port_80"
# [53] "How_many_computer_programming_languages_do_you_know_Not_including_HTML"
# [54] "How_many_years_of_working_experience_do_you_have_in_network_operation_and_security_area"
# [55] "On_average_how_many_times_do_you_have_to_deal_with_computer_security_related_problems"
# [56] "undefined_Firewall"
# [57] "undefined_Antivirus"
# [58] "undefined_Intrusion_Detection_System_IDS"
# [59] "undefined_Secure_Shell_SSH"
# [60] "undefined_Pretty_Good_Privacy_PGP"
# [61] "undefined_Access_control_AC"
# [62] "undefined_Designed_a_website"
# [63] "undefined_Registered_a_domain_name"
# [64] "undefined_Used_SSH"
# [65] "undefined_Configured_a_firewall"
# [66] "undefined_Created_a_database"          (F2)
# [67] "undefined_Installed_a_computer_program"
# [68] "undefined_Written_a_computer_program"  (F2)
# [69] "undefined_https"
# [70] "undefined_lock_icon_on_the_page"
# [71] "undefined_certificate"
# [72] "undefined_website_privacy_statements"
# [73] "undefined_type_of_website"
# [74] "undefined_professionallooking_website"
# [75] "undefined_Other"
# [76] "What_is_the_main_definition_of_IoT"
# [77] "What_is_Access_Control_List"
# [78] "ResponseTime.2"
# [79] "participant.2"
# [80] "valid_participant.2"
# [81] "I_think_that_I_would_like_to_perform_this_analysis_frequently"
# [82] "I_found_the_analysis_unnecessarily_complex"
# [83] "I_thought_the_analysis_was_easy"
# [84] "I_think_that_I_would_need_the_support_of_a_technical_person_to_be_able_to_perform_the_analysis"
# [85] "I_found_the_various_components_in_this_analysis_were_well_integrated"
# [86] "I_thought_there_was_too_much_inconsistency_in_this_analysis"
# [87] "I_would_imagine_that_most_people_would_learn_to_use_this_analysis_very_quickly"
# [88] "I_found_this_analysis_very_cumbersome_to_perform"
# [89] "I_felt_very_confident_performing_the_analysis"
# [90] "I_needed_to_learn_a_lot_of_things_before_I_could_get_going_with_the_analysis"
# [91] "ResponseTime.3"
# [92] "workerId"
# [93] "assignmentId"
# [94] "valid_participant.3"
summary(know_mud$'combined$acc')
ggplot(know_mud, aes(x=category, y='combined$acc'))
summary(know_mud$category)
ggplot(know_mud, aes(x=category, y='combined$acc')) + geom_boxplot(size = 0.75) + geom_jitter(alpha = 0.5)
library("polr")
install.packages("poly")
install.packages("polr")
install.packages('polr')
install.packages(polr)
install.packages("polr")
install.packages("MASS")
library("MASS")
m <- polr(know_mud$category ~ know_mud$totalknowledge_fa, Hess = TRUE)
m <- polr(know_mud$category ~ know_mud$'combined$acc', Hess = TRUE)
m <- polr(know_mud$category ~ know_mud$'combined$acc')
m <- vglm(know_mud$category ~ know_mud$'combined$acc', family = propodds, model = TRUE)
library(VGAM)
install.packages("VGAM")
library(VGAM)
m <- vglm(know_mud$category ~ know_mud$'combined$acc', family = propodds, model = TRUE)
m <- vglm(as.factors(know_mud$category) ~ know_mud$'combined$acc', family = propodds, model = TRUE)
m <- vglm(know_mud$category ~ know_mud$'combined$acc', family = propodds, model = TRUE)
m
m <- polr(know_mud$category ~ know_mud$'combined$acc', method = "logistic")
m <- xtabs(~ know_mud$category + know_mud$'combined$acc')
m
View(m)
m <- xtabs(~ know_mud$'combined$acc' + know_mud$category)
addmargins(m)
m <- vglm(know_mud$category ~ know_mud$'combined$acc', family = propodds, model = TRUE)
coef(summary(m))
n <- vglm(know_plain$category ~ know_plain$'combined$acc', family = propodds, model = TRUE)
coef(summary(n))
logo <- glm(know_mud$'combined$acc' ~ know_mud$category, family = "binomial")
logo <- glm(know_mud$category ~ know_plain$'combined$acc', family = "binomial")
summary(logo)
logo <- glm(know_mud$category ~ know_plain$'combined$acc', family = "logit")
ll.null <- logo$null.deviance/-2
ll.proposed <- logo$deviance/-2
(ll.null - ll.proposed)/ll.null
1-pchisq(2*(ll.proposed - ll.null), df=(length(logo$coefficients)-1))
levels(know_mud$category)
m <- xtabs(~ know_mud$'combined$acc' + know_mud$category)
m
m <- glm(know_mud$category ~ know_mud$'combined$acc', family = "binomial")
summary(m)
str(know_mud)
n <- glm(know_plain$category ~ know_plain$'combined$acc', family = "binomial")
summary(n)
o <- glm(comp_plain$category ~ comp_plain$'combined$acc', family = "binomial")
o <- glm(comp_mud$category ~ comp_mud$'combined$acc', family = "binomial")
o <- glm(comp_plain$category ~ comp_plain$'combined$acc', family = "binomial")
p <- glm(comp_mud$category ~ comp_mud$'combined$acc', family = "binomial")
summary(o)
summary(p)
View(comp_mud)
names(comp_mud)
Eexp <- totcomp
expertise <- cbind(expertise, Eexp)
df2 <- cbind
df2 <- cbind(expertise$Eexp, expertise$Etech, expertise$Eyears, expertise$Etimes, expertise$Elang)
View(df2)
df2_headings <- c('Eexp', 'Etech', 'Eyears', 'Etimes', 'Elang')
c2 <- cov(df2)
factors 2 <- fa(c, nfactors = 1, rotate = "oblimin", fm="minres")
factors2 <- fa(c, nfactors = 1, rotate = "oblimin", fm="minres")
library("psych")
factors2 <- fa(c, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors2)
print(factors2$loadings, cutoff = 0.3)
fa.diagram(factors2)
factors2 <- fa(c2, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors2)
print(factors2$loadings, cutoff = 0.3)
fa.diagram(factors2)
total_computer_fa <- 0.5*expertise$Eyears + 0.4*expertise$Elang + 0.4*expertise$Etimes
expertise <- cbind(expertise, total_computer_fa)
copy_expertise <- cbind(expertise, combined$acc)
categoryl <- rep("low",13)
categoryh <- rep("high",13)
category <- c(categoryl, categoryh)
know_mud <- copy_expertise[1:26,]
know_mud <- know_mud[order(know_mud$totalknowledge_fa),]
know_mud <- cbind(know_mud, category)
know_plain <- copy_expertise[27:52,]
know_plain <- know_plain[order(know_plain$totalknowledge_fa),]
know_plain <- cbind(know_plain, category)
comp_mud <- copy_expertise[1:26,]
comp_mud <- comp_mud[order(comp_mud$total_computer),]
comp_mud <- cbind(comp_mud, category)
comp_plain <- copy_expertise[27:52,]
comp_plain <- comp_plain[order(comp_plain$total_computer),]
comp_plain <- cbind(comp_plain, category)
know_mud_lh <- wilcox.test(know_mud$totalknowledge_fa[1:13], know_mud$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
know_plain_lh <- wilcox.test(know_plain$totalknowledge_fa[1:13], know_plain$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_mud_lh <- wilcox.test(comp_mud$total_computer[1:13], comp_mud$total_computer[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_plain_lh <- wilcox.test(comp_plain$total_computer[1:13], comp_plain$total_computer[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge")
ggboxplot(know_plain, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Plain - Knowledge")
ggboxplot(comp_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Comp Exp")
comp_mud <- copy_expertise[1:26,]
comp_mud <- comp_mud[order(comp_mud$total_computer_fa),]
comp_mud <- cbind(comp_mud, category)
comp_plain <- copy_expertise[27:52,]
comp_plain <- comp_plain[order(comp_plain$total_computer_fa),]
comp_plain <- cbind(comp_plain, category)
comp_mud_lh <- wilcox.test(comp_mud$total_computer_fa[1:13], comp_mud$total_computer_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_plain_lh <- wilcox.test(comp_plain$total_computer_fa[1:13], comp_plain$total_computer_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_mud_lh
comp_plain_lh
#ordinal logistic regression
m <- glm(know_mud$category ~ know_mud$'combined$acc', family = "binomial")
n <- glm(know_plain$category ~ know_plain$'combined$acc', family = "binomial")
o <- glm(comp_plain$category ~ comp_plain$'combined$acc', family = "binomial")
p <- glm(comp_mud$category ~ comp_mud$'combined$acc', family = "binomial")
summary(m)
summary(n)
summary(o)
summary(p)
confint(m)
confint(n)
wald.test(b=coef(m), sigma = vcov(m))
library("aod")
install.packages("aod")
library("aod")
wald.test(b=coef(m), sigma = vcov(m))
wald.test(b=coef(m), Sigma = vcov(m))
wald.test(b=coef(m), Sigma = vcov(m), Terms = 1)
wald.test(b=coef(n), Sigma = vcov(m), Terms = 1)
wald.test(b=coef(o), Sigma = vcov(m), Terms = 1)
wald.test(b=coef(p), Sigma = vcov(m), Terms = 1)
polr(know_mud$category ~ know_mud)
polr(know_mud$category ~ know_mud$'combined$acc', Hess = TRUE)
glm(know_mud$totalknowledge_fa ~ know_mud$`combined$acc`)
glm(know_mud$`combined$acc` ~ know_mud$category)
wald.test(b=coef(p), Sigma = vcov(m), L = 1)
wald.test(b=coef(m), Sigma = vcov(m), Terms = 1)
y <- predict(m, newdata = copy_expertise, type = "response")
y <- predict(m, newdata = know_mud, type = "response")
y
View(y)
Vglm(know_mud$totalknowledge_fa ~ know_mud$'combined$acc', family = "binomial")
glm(know_mud$totalknowledge_fa ~ know_mud$'combined$acc')
glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa)
summary(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
summary(glm(know_plain$'combined$acc' ~ know_plain$totalknowledge_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$totalknowledge_fa))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$totalknowledge_fa))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$totalknowledge_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$totalknowledge_fa))
View(combined)
View(combined)
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa))
pyramidGH <- ggplot(combined, aes(x = age, y = 1:nrow(combined), fill = gender)) +
geom_bar(data = subset(combined, gender == 2), stat = "gender") +
geom_bar(data = subset(popGHcens, Gender == 1), stat = "gender") +
scale_y_continuous(labels = paste0(as.character(c(seq(2, 0, -1), seq(1, 2, 1))), "m")) +
coord_flip()
pyramidGH <- ggplot(combined, aes(x = age, y = 1:nrow(combined), fill = gender)) +
geom_bar(data = subset(combined, gender == 2), stat = "identity") +
geom_bar(data = subset(popGHcens, Gender == 1), stat = "identity") +
scale_y_continuous(labels = paste0(as.character(c(seq(2, 0, -1), seq(1, 2, 1))), "m")) +
coord_flip()
pyramidGH <- ggplot(combined, aes(x = age, y = 1:nrow(combined), fill = gender)) +
geom_bar(data = subset(combined, gender == 2), stat = "identity") +
geom_bar(data = subset(combined, Gender == 1), stat = "identity") +
scale_y_continuous(labels = paste0(as.character(c(seq(2, 0, -1), seq(1, 2, 1))), "m")) +
coord_flip()
pyramidGH <- ggplot(combined, aes(x = age, y = 1:nrow(combined), fill = gender)) +
geom_bar(data = subset(combined, gender == 2), stat = "identity") +
geom_bar(data = subset(combined, gender == 1), stat = "identity") +
scale_y_continuous(labels = paste0(as.character(c(seq(2, 0, -1), seq(1, 2, 1))), "m")) +
coord_flip()
pyramidGH
pyramidGH <- ggplot(combined, aes(x = age, y = 1:nrow(combined), fill = gender)) +
geom_bar(data = subset(combined, gender == 2), stat = "identity") +
geom_bar(data = subset(combined, gender == 1), stat = "identity") +
coord_flip()
pyramidGH
#names(df) <- df_headings
c <- cov(df)
factors <- fa(c, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors)
print(factors$loadings, cutoff = 0.3)
fa.diagram(factors)
fa.parallel(c, fm = ‘minres’, fa = ‘fa’)
fa.parallel(c, fm = "minres", fa = "fa")
factors <- fa(c, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors)
print(factors$loadings, cutoff = 0.3)
fa.parallel(c, fm = "minres", fa = "fa", "Scree Plot for Knowledge")
fa.parallel(c, fm = "minres", fa = "fa", title = "Scree Plot for Knowledge")
df2 <- cbind(expertise$Eexp, expertise$Etech, expertise$Eyears, expertise$Etimes, expertise$Elang)
df2_headings <- c('Eexp', 'Etech', 'Eyears', 'Etimes', 'Elang')
c2 <- cov(df2)
factors2 <- fa(c2, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors2)
print(factors2)
print(factors2$loadings, cutoff = 0.3)
fa.diagram(factors2)
fa.parallel(c, fm = "minres", fa = "fa")
know_mud_lh
know_plain_lh
comp_mud_lh
comp_plain_lh
summary(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer))
summary(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
summary(glm(know_plain$'combined$acc' ~ know_plain$totalknowledge_fa)) #significant
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa))
#ordinal logistic regression
m <- glm(know_mud$category ~ know_mud$'combined$acc', family = "binomial")
n <- glm(know_plain$category ~ know_plain$'combined$acc', family = "binomial")
o <- glm(comp_plain$category ~ comp_plain$'combined$acc', family = "binomial")
p <- glm(comp_mud$category ~ comp_mud$'combined$acc', family = "binomial")
m
summary(m)
summary(n)
summary(o)
summary(p)
summary(Eexp)
summary(Etech)
summary(Etimes)
summary(expertise$Etimes)
summary(expertise$Eyears)
summary(expertise$Elang)
Eexp <- (expertise$Eexp - min(expertise$Eexp))/(max(expertise$Eexp) - min(expertise$Eexp))
expertise$Eexp <- (expertise$Eexp - min(expertise$Eexp))/(max(expertise$Eexp) - min(expertise$Eexp))
summary(expertise$Eexp)
expertise$Etech <- (expertise$Etech - min(expertise$Etech))/(max(expertise$Etech) - min(expertise$Etech))
expertise$Eyears <- (expertise$Eyears - min(expertise$Eyears))/(max(expertise$Eyears) - min(expertise$Eyears))
expertise$Etimes <- (expertise$Etimes - min(expertise$Etimes))/(max(expertise$Etimes) - min(expertise$Etimes))
expertise$Elang <- (expertise$Elang - min(expertise$Elang))/(max(expertise$Elang) - min(expertise$Elang))
summary(expertise$Etech)
summary(expertise$Elang)
summary(expertise$Etimes)
summary(expertise$Eyears)
df2 <- cbind(expertise$Eexp, expertise$Etech, expertise$Eyears, expertise$Etimes, expertise$Elang)
df2_headings <- c('Eexp', 'Etech', 'Eyears', 'Etimes', 'Elang')
c2 <- cov(df2)
factors2 <- fa(c2, nfactors = 1, rotate = "oblimin", fm="minres")
print(factors2)
print(factors2$loadings, cutoff = 0.3)
fa.diagram(factors2)
fa.parallel(c, fm = "minres", fa = "fa")
total_computer_fa <- 0.5*expertise$Eyears + 0.4*expertise$Elang + 0.4*expertise$Etimes
expertise$total_computer_fa <- 0.5*expertise$Eyears + 0.4*expertise$Elang + 0.4*expertise$Etimes
comp_mud <- copy_expertise[1:26,]
comp_mud <- comp_mud[order(comp_mud$total_computer_fa),]
comp_mud <- cbind(comp_mud, category)
comp_plain <- copy_expertise[27:52,]
comp_plain <- comp_plain[order(comp_plain$total_computer_fa),]
comp_plain <- cbind(comp_plain, category)
know_mud_lh <- wilcox.test(know_mud$totalknowledge_fa[1:13], know_mud$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
know_plain_lh <- wilcox.test(know_plain$totalknowledge_fa[1:13], know_plain$totalknowledge_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_mud_lh <- wilcox.test(comp_mud$total_computer_fa[1:13], comp_mud$total_computer_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
comp_plain_lh <- wilcox.test(comp_plain$total_computer_fa[1:13], comp_plain$total_computer_fa[14:26], conf.level = 0.95, alternative = "two.sided", paired = TRUE)
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge")
ggboxplot(know_plain, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Plain - Knowledge")
ggboxplot(comp_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Comp Exp")
ggboxplot(comp_plain, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Plain - Comp Exp")
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish, know_mud$Kcert, know_mud$Kiot, know_mud$Kac, know_mud$K80, know_mud$Kweb, know_mud$Ksql, know_mud$Kids))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish, know_mud$Kcert, know_mud$Kiot, know_mud$Kac, know_mud$K80, know_mud$Kweb))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish, know_mud$Kcert, know_mud$Kiot, know_mud$Kac, know_mud$K80, know_mud$Kweb, know_mud$Ksql, know_mud$Kids, family = "binomial"))
summary(Kphish)
summary(lm(know_mud$'combined$acc' ~ know_mud$Kphish, know_mud$Kcert, know_mud$Kiot, know_mud$Kac, know_mud$K80, know_mud$Kweb, know_mud$Ksql, know_mud$Kids))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish, know_mud$Kcert))
summary(glm(know_mud$'combined$acc' ~ table(know_mud$Kphish), table(know_mud$Kcert))
)
str(know_mud)
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kcert))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kiot))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kac))
summary(glm(know_mud$'combined$acc' ~ know_mud$K80))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kweb))
summary(glm(know_mud$'combined$acc' ~ know_mud$Ksql))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kids))
plot(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa)
with(know_mud,plot(totalknowledge_fa, 'combined$acc'))
with(plot(know_mud$totalknowledge_fa, know_mud$'combined$acc'))
abline(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
plot(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa, xlab = "TotalKnowledge", ylab = "Accuracy")
abline(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
plot(know_plain$'combined$acc' ~ know_plain$totalknowledge_fa, xlab = "TotalKnowledge", ylab = "Accuracy (plain)")
abline(glm(know_plain$'combined$acc' ~ know_plain$totalknowledge_fa))
summary(glm(know_mud$'combined$acc' ~ know_mud$Ksql))
summary(glm(know_plain$'combined$acc' ~ know_plain$Ksql))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kphish))
summary(glm(know_mud$'combined$acc' ~ know_mud$Ksql))
summary(glm(know_plain$'combined$acc' ~ know_plain$Ksql))
summary(glm(know_plain$'combined$acc' ~ know_plain$Kphish))
summary(glm(know_plain$'combined$acc' ~ know_plain$Kcert))
summary(glm(know_plain$'combined$acc' ~ know_plain$Kweb))
summary(glm(know_plain$'combined$acc' ~ know_plain$Kac))
summary(glm(know_plain$'combined$acc' ~ know_plain$Kids))
summary(glm(know_plain$'combined$acc' ~ know_plain$K80))
summary(glm(know_mud$'combined$acc' ~ know_mud$K80))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kids))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kac))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kweb))
summary(glm(know_mud$'combined$acc' ~ know_mud$Kcert))
summary(glm(know_mud$'combined$acc' ~ know_mud$totalknowledge_fa))
summary(glm(know_plain$'combined$acc' ~ know_plain$totalknowledge_fa))
plot(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa, xlab = "TotalExperience", ylab = "Accuracy (mudviz)")
abline(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
plot(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa, xlab = "TotalExperience", ylab = "Accuracy (plain)")
abline(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Eexp))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Etech))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Etimes))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Elanf))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Elang))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$Eyears))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$Elang))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$Eyears))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$Etimes))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$Etech))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$Eexp))
summary(glm(comp_mud$'combined$acc' ~ comp_mud$total_computer_fa))
summary(glm(comp_plain$'combined$acc' ~ comp_plain$total_computer_fa))
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge") + scale_y_discrete(limits=c("60","70","80", "90", "100"))
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge") + scale_y_discrete(limits=c("60", "100", "10"))
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge") + scale_y_discrete(limits=c(60,100))
#plot stuff
ggboxplot(know_mud, x = "category", y = "`combined$acc`", color = "category", palette = c("#00AFBB", "#E7B800"), order = c("low", "high"), ylab = "accuracy", xlab = "category", title = "Mud - Knowledge") + scale_y_discrete(limits=c("60","100"))
str(combined$education)
View(copy_combined)
levels(copy_combined$What_is_the_highest_degree_or_level_of_school_you_have_completed_If_you_are_currently_enrolled_in_school_please_indicate_the_highest_degree_you_have_received_)
table(copy_combined$What_is_the_highest_degree_or_level_of_school_you_have_completed_If_you_are_currently_enrolled_in_school_please_indicate_the_highest_degree_you_have_received_)
levels(copy_combined$What_is_your_age)
table(copy_combined$What_is_your_age)
table(copy_combined$Which_gender_do_you_most_identify_with)
table(copy_combined$What_is_your_current_employment_status)
8+44
800/44
4400/52
800/52
41/52
2/52
1/52
1.9+3.8+15.4+78.8
36/52
13/52
2.5+1.9+69.2+3.8
3+13+36
25+1.9+3.8+69.2
100/52
3600/52
5/52
9/52
37/52
9.6+17.3+71.2+1.9
